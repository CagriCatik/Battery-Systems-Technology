import matplotlib.pyplot as plt
import numpy as np

class BatteryPack:
    def __init__(self, thermal_mass, initial_temp, ambient_temp, heat_generation):
        """
        Initialize the battery pack parameters.
        
        :param thermal_mass: Thermal mass of the battery pack (J/°C)
        :param initial_temp: Initial temperature of the battery pack (°C)
        :param ambient_temp: Ambient temperature (°C)
        :param heat_generation: Heat generated by the battery (W)
        """
        self.thermal_mass = thermal_mass
        self.current_temp = initial_temp
        self.ambient_temp = ambient_temp
        self.heat_generation = heat_generation

class BTMS:
    def __init__(self, battery, system_type, airflow_rate, specific_heat_air=1005, efficiency=1.0):
        """
        Initialize the BTMS system.
        
        :param battery: Instance of BatteryPack
        :param system_type: Type of BTMS ('Passive', 'Active', 'HeatRecovery')
        :param airflow_rate: Airflow rate (m^3/s)
        :param specific_heat_air: Specific heat capacity of air (J/(kg·°C))
        :param efficiency: Efficiency factor for heat exchange
        """
        self.battery = battery
        self.system_type = system_type
        self.airflow_rate = airflow_rate
        self.specific_heat_air = specific_heat_air
        self.efficiency = efficiency
        self.air_density = 1.225  # kg/m^3 at sea level
        self.power_consumption = 0  # To be calculated for Active systems

    def calculate_heat_transfer(self, delta_temp):
        """
        Calculate the heat transfer based on airflow and temperature difference.
        
        :param delta_temp: Temperature difference between battery and air (°C)
        :return: Heat transfer rate (W)
        """
        mass_flow_rate = self.air_density * self.airflow_rate  # kg/s
        heat_transfer = mass_flow_rate * self.specific_heat_air * delta_temp * self.efficiency
        return heat_transfer

    def update_temperature(self, time_step):
        """
        Update the battery temperature based on heat generation and heat transfer.
        
        :param time_step: Time step for the simulation (s)
        """
        # Determine the temperature difference
        delta_temp = self.battery.current_temp - self.battery.ambient_temp

        # Calculate heat transfer based on system type
        if self.system_type == 'Passive':
            heat_transfer = self.calculate_heat_transfer(delta_temp)
        elif self.system_type == 'Active':
            # Active systems can adjust airflow or have higher efficiency
            self.power_consumption = 100  # Example power consumption in Watts
            heat_transfer = self.calculate_heat_transfer(delta_temp) * 1.5  # Assume higher efficiency
        elif self.system_type == 'HeatRecovery':
            # Heat recovery systems reuse some heat, improving efficiency
            heat_transfer = self.calculate_heat_transfer(delta_temp) * 1.2
            self.power_consumption = 80  # Lower power consumption due to heat recovery
        else:
            raise ValueError("Invalid system type. Choose 'Passive', 'Active', or 'HeatRecovery'.")

        # Net heat added to the battery
        net_heat = self.battery.heat_generation - heat_transfer  # W

        # Update temperature
        delta_T = (net_heat * time_step) / self.battery.thermal_mass
        self.battery.current_temp += delta_T

        return heat_transfer, self.power_consumption

def simulate_btms(system_type, total_time=3600, time_step=1):
    """
    Simulate the BTMS over a period of time.
    
    :param system_type: Type of BTMS ('Passive', 'Active', 'HeatRecovery')
    :param total_time: Total simulation time in seconds
    :param time_step: Time step in seconds
    :return: Time array, Temperature array, Heat transfer array, Power consumption array
    """
    # Initialize battery and BTMS parameters
    battery = BatteryPack(
        thermal_mass=500000,      # Example thermal mass in J/°C
        initial_temp=25.0,        # Initial temperature in °C
        ambient_temp=25.0,        # Ambient temperature in °C
        heat_generation=200       # Heat generation in W
    )

    btms = BTMS(
        battery=battery,
        system_type=system_type,
        airflow_rate=0.05          # Example airflow rate in m^3/s
    )

    # Initialize arrays to store simulation data
    time_array = np.arange(0, total_time, time_step)
    temp_array = []
    heat_transfer_array = []
    power_consumption_array = []

    for t in time_array:
        temp_array.append(btms.battery.current_temp)
        heat_transfer, power = btms.update_temperature(time_step)
        heat_transfer_array.append(heat_transfer)
        power_consumption_array.append(power)

    return time_array, np.array(temp_array), np.array(heat_transfer_array), np.array(power_consumption_array)

def plot_results(time, temp, heat_transfer, power, system_type):
    """
    Plot the simulation results.
    
    :param time: Time array
    :param temp: Temperature array
    :param heat_transfer: Heat transfer array
    :param power: Power consumption array
    :param system_type: Type of BTMS for labeling
    """
    fig, ax1 = plt.subplots(figsize=(12,6))

    color = 'tab:red'
    ax1.set_xlabel('Time (s)')
    ax1.set_ylabel('Battery Temperature (°C)', color=color)
    ax1.plot(time, temp, color=color, label='Battery Temperature')
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.legend(loc='upper left')

    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    color = 'tab:blue'
    ax2.set_ylabel('Heat Transfer (W)', color=color)  # we already handled the x-label with ax1
    ax2.plot(time, heat_transfer, color=color, label='Heat Transfer')
    ax2.tick_params(axis='y', labelcolor=color)
    ax2.legend(loc='upper right')

    plt.title(f'BTMS Simulation - {system_type} System')
    plt.show()

    # Plot power consumption if applicable
    if np.any(power > 0):
        plt.figure(figsize=(12,4))
        plt.plot(time, power, color='tab:green', label='Power Consumption (W)')
        plt.xlabel('Time (s)')
        plt.ylabel('Power Consumption (W)')
        plt.title(f'Power Consumption - {system_type} System')
        plt.legend()
        plt.show()

def main():
    systems = ['Passive', 'Active', 'HeatRecovery']
    for system in systems:
        time, temp, heat_transfer, power = simulate_btms(system_type=system, total_time=7200, time_step=1)
        plot_results(time, temp, heat_transfer, power, system)

if __name__ == "__main__":
    main()
