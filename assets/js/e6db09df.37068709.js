"use strict";(self.webpackChunkBMS=self.webpackChunkBMS||[]).push([[7171],{9451:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"theory/modeling_testing/hil/diagrams","title":"PlantUML Diagrams","description":"<PlantUML code={`@startuml","source":"@site/docs/theory/10_modeling_testing/05_hil/08_diagrams.mdx","sourceDirName":"theory/10_modeling_testing/05_hil","slug":"/theory/modeling_testing/hil/diagrams","permalink":"/Battery-Systems-Technology/docs/theory/modeling_testing/hil/diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/CagriCatik/Battery-Systems-Technology/edit/main/docs/theory/10_modeling_testing/05_hil/08_diagrams.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"diagrams","title":"PlantUML Diagrams"},"sidebar":"modelingTestingSidebar","previous":{"title":"BMS Software with SiL","permalink":"/Battery-Systems-Technology/docs/theory/modeling_testing/hil/bms-sil"}}');var s=t(4848),o=t(8453),i=(t(8796),t(8087));const r={id:"diagrams",title:"PlantUML Diagrams"},l="Example Diagram",c={},d=[];function m(n){const e={h1:"h1",header:"header",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"example-diagram",children:"Example Diagram"})}),"\n",(0,s.jsx)(i.A,{code:'@startuml\n\' Define main modules as components\ncomponent "Battery Pack" as A\ncomponent "Cell Monitoring Module" as B\ncomponent "Balancing Module" as C\ncomponent "Control Module" as D\ncomponent "Communication Module" as E\ncomponent "Power Distribution Module" as F\n\n\' Define subcomponents in packages\npackage "Cell Monitoring Sensors" {\n  [Voltage Sensor] as B1\n  [Temperature Sensor] as B2\n  [Current Sensor] as B3\n}\n\npackage "Balancing Methods" {\n  [Passive Balancer] as C1\n  [Active Balancer] as C2\n}\n\npackage "Control Processing" {\n  [Algorithm Processor] as D1\n  [Safety & Diagnostics] as D2\n}\n\npackage "Communication Interfaces" {\n  [CAN Bus] as E1\n  [UART/SPI] as E2\n  [Wireless Module] as E3\n}\n\n\' Define relationships between main modules\nA --\x3e B : Provides voltage/current\nA --\x3e C : Supplies power for balancing\n\n\' Connect subcomponents to their parent modules\nB --\x3e B1\nB --\x3e B2\nB --\x3e B3\n\nC --\x3e C1\nC --\x3e C2\n\nD --\x3e D1\nD --\x3e D2\n\nE --\x3e E1\nE --\x3e E2\nE --\x3e E3\n\n\' Inter-module interactions\nB --\x3e D : Sends sensor data\nC --\x3e D : Provides balancing status\nD --\x3e C : Issues balancing commands\nD --\x3e F : Triggers power control signals\nD --\x3e E : Transmits status & logs\nF --\x3e D : Feedback voltage/current\n\n\' Additional diagnostic feedback loop\nD2 --\x3e B : Diagnostic requests\n\n@enduml'})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(m,{...n})}):m(n)}},8087:(n,e,t)=>{t.d(e,{A:()=>i});t(6540);var a=t(8796),s=t.n(a),o=t(4848);const i=n=>{let{code:e,format:t="svg",serverUrl:a="https://www.plantuml.com/plantuml"}=n;const i=`${a}/${t}/${s().encode(e)}`;return(0,o.jsx)("div",{className:"plantuml-diagram",children:(0,o.jsx)("img",{src:i,alt:"PlantUML diagram"})})}}}]);