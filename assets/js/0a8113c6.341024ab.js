"use strict";(self.webpackChunkBMS=self.webpackChunkBMS||[]).push([[9340],{5631:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"theory/modeling_testing/matlab/testing_code","title":"Testing Generated Code","description":"1. Introduction to Code Validation","source":"@site/docs/theory/10_modeling_testing/03_matlab/08_testing_code.md","sourceDirName":"theory/10_modeling_testing/03_matlab","slug":"/theory/modeling_testing/matlab/testing_code","permalink":"/Battery-Systems-Technology/docs/theory/modeling_testing/matlab/testing_code","draft":false,"unlisted":false,"editUrl":"https://github.com/CagriCatik/Battery-Systems-Technology/edit/main/docs/theory/10_modeling_testing/03_matlab/08_testing_code.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"modelingTestingSidebar","previous":{"title":"Generating Code","permalink":"/Battery-Systems-Technology/docs/theory/modeling_testing/matlab/generating_code"},"next":{"title":"Closed-Loop Testing","permalink":"/Battery-Systems-Technology/docs/theory/modeling_testing/matlab/closed_loop"}}');var t=s(4848),r=s(8453);const l={},o="Testing Generated Code",d={},a=[{value:"<strong>1. Introduction to Code Validation</strong>",id:"1-introduction-to-code-validation",level:2},{value:"<strong>2. Software-in-the-Loop (SIL) Testing</strong>",id:"2-software-in-the-loop-sil-testing",level:2},{value:"<strong>2.1 Workflow</strong>",id:"21-workflow",level:3},{value:"<strong>2.2 Equivalence Testing</strong>",id:"22-equivalence-testing",level:3},{value:"<strong>2.3 Analyzing Results</strong>",id:"23-analyzing-results",level:3},{value:"<strong>3. Processor-in-the-Loop (PIL) Testing</strong>",id:"3-processor-in-the-loop-pil-testing",level:2},{value:"<strong>3.1 PIL Setup</strong>",id:"31-pil-setup",level:3},{value:"<strong>3.2 Execution Time Measurement</strong>",id:"32-execution-time-measurement",level:3},{value:"<strong>3.3 Workflow</strong>",id:"33-workflow",level:3},{value:"<strong>4. Key Tools and Workflow</strong>",id:"4-key-tools-and-workflow",level:2},{value:"<strong>4.1 Simulink Test Manager</strong>",id:"41-simulink-test-manager",level:3},{value:"<strong>4.2 SIL/PIL Manager</strong>",id:"42-silpil-manager",level:3},{value:"<strong>4.3 Simulation Data Inspector</strong>",id:"43-simulation-data-inspector",level:3},{value:"<strong>5. Benefits</strong>",id:"5-benefits",level:2},{value:"<strong>6. Example: BeagleBone Black PIL Test</strong>",id:"6-example-beaglebone-black-pil-test",level:2},{value:"<strong>6.1 Setup</strong>",id:"61-setup",level:3},{value:"<strong>6.2 Results</strong>",id:"62-results",level:3},{value:"<strong>Summary</strong>",id:"summary",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"testing-generated-code",children:"Testing Generated Code"})}),"\n",(0,t.jsx)(n.h2,{id:"1-introduction-to-code-validation",children:(0,t.jsx)(n.strong,{children:"1. Introduction to Code Validation"})}),"\n",(0,t.jsx)(n.p,{children:"After generating code from a Battery Management System (BMS) model, validation ensures the code behaves identically to the original Simulink design. Two key methods are used:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Software-in-the-Loop (SIL)"}),": Executes generated code on a host PC, validating functional correctness."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Processor-in-the-Loop (PIL)"}),": Runs code on the target embedded hardware (e.g., BeagleBone Black), measuring performance and real-time behavior."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-software-in-the-loop-sil-testing",children:(0,t.jsx)(n.strong,{children:"2. Software-in-the-Loop (SIL) Testing"})}),"\n",(0,t.jsx)(n.h3,{id:"21-workflow",children:(0,t.jsx)(n.strong,{children:"2.1 Workflow"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generate Code"}),": Use Embedded Coder to produce ",(0,t.jsx)(n.code,{children:".c"})," and ",(0,t.jsx)(n.code,{children:".h"})," files from the BMS model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reuse Existing Tests"}),": Leverage test harnesses created for the Simulink model to validate the generated code."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configure SIL Mode"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In ",(0,t.jsx)(n.strong,{children:"Simulink Test Manager"}),", select ",(0,t.jsx)(n.em,{children:"Simulation Mode > Software-in-the-Loop"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"This replaces the Simulink model with the compiled object code during simulation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"22-equivalence-testing",children:(0,t.jsx)(n.strong,{children:"2.2 Equivalence Testing"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Objective"}),": Compare results from ",(0,t.jsx)(n.strong,{children:"Model-in-the-Loop (MIL)"})," and ",(0,t.jsx)(n.strong,{children:"SIL"})," simulations to ensure the generated code matches the model behavior."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Steps"}),":","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Run MIL tests (original Simulink model)."}),"\n",(0,t.jsx)(n.li,{children:"Run SIL tests (generated code)."}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"Simulink Test Manager"})," to validate equivalence (pass/fail)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"23-analyzing-results",children:(0,t.jsx)(n.strong,{children:"2.3 Analyzing Results"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simulation Data Inspector"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Compare logged signals (e.g., contactor states, fault flags) between MIL and SIL runs."}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"Error = 0"})," indicates identical behavior."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Coverage"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Enable coverage metrics (e.g., MCDC) in SIL mode to validate code execution paths and ensure comprehensive testing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"3-processor-in-the-loop-pil-testing",children:(0,t.jsx)(n.strong,{children:"3. Processor-in-the-Loop (PIL) Testing"})}),"\n",(0,t.jsx)(n.h3,{id:"31-pil-setup",children:(0,t.jsx)(n.strong,{children:"3.1 PIL Setup"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Target Configuration"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Select the embedded hardware (e.g., BeagleBone Black) in ",(0,t.jsx)(n.em,{children:"Simulink > Hardware Settings"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Cross-compile code for the target processor."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configure PIL Mode"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"SIL/PIL Manager"}),", enable ",(0,t.jsx)(n.em,{children:"Processor-in-the-Loop"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"32-execution-time-measurement",children:(0,t.jsx)(n.strong,{children:"3.2 Execution Time Measurement"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Task Execution Time"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Measure how long the BMS code takes to execute on the target hardware."}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"3.9 \xb5s"})," per cycle (as reported in the ",(0,t.jsx)(n.strong,{children:"Simulation Data Inspector"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"33-workflow",children:(0,t.jsx)(n.strong,{children:"3.3 Workflow"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run PIL Tests"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Execute tests on the target hardware via the ",(0,t.jsx)(n.strong,{children:"SIL/PIL Manager"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compare Results"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Validate equivalence between MIL, SIL, and PIL outputs to ensure consistency across all testing stages."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generate Report"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Includes task execution time, memory usage, and signal comparisons for detailed analysis."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"4-key-tools-and-workflow",children:(0,t.jsx)(n.strong,{children:"4. Key Tools and Workflow"})}),"\n",(0,t.jsx)(n.h3,{id:"41-simulink-test-manager",children:(0,t.jsx)(n.strong,{children:"4.1 Simulink Test Manager"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Equivalence Tests"}),": Automate MIL vs. SIL/PIL comparisons to ensure functional correctness."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Execution"}),": Run multiple iterations (e.g., 11 test scenarios) to validate edge cases."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coverage Integration"}),": Track code coverage metrics during SIL/PIL runs to ensure comprehensive testing."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"42-silpil-manager",children:(0,t.jsx)(n.strong,{children:"4.2 SIL/PIL Manager"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hardware Integration"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Supports BeagleBone Black, Arduino, and custom targets for flexible testing."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automated Back-to-Back Testing"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Validate code against the model without manual intervention, reducing errors and saving time."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"43-simulation-data-inspector",children:(0,t.jsx)(n.strong,{children:"4.3 Simulation Data Inspector"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Signal Comparison"}),": Overlay MIL, SIL, and PIL signals to detect discrepancies and ensure consistency."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execution Time Profiling"}),": Visualize task timing for performance optimization and real-time compliance."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"5-benefits",children:(0,t.jsx)(n.strong,{children:"5. Benefits"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Functional Correctness"}),": Ensure the generated code matches the model behavior, reducing the risk of errors."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Metrics"}),": Measure execution time and memory usage to validate real-time performance."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Certification Readiness"}),": SIL/PIL tests align with safety standards like ISO 26262 and DO-178C, ensuring compliance."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"6-example-beaglebone-black-pil-test",children:(0,t.jsx)(n.strong,{children:"6. Example: BeagleBone Black PIL Test"})}),"\n",(0,t.jsx)(n.h3,{id:"61-setup",children:(0,t.jsx)(n.strong,{children:"6.1 Setup"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Target"}),": BeagleBone Black board."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test Harness"}),": Reuse signal editor scenarios (e.g., fault conditions) for consistent testing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metrics"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execution Time"}),": 3 \xb5s per cycle."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Signal Accuracy"}),": Matches MIL/SIL results, ensuring consistency across testing stages."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"62-results",children:(0,t.jsx)(n.strong,{children:"6.2 Results"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pass Criteria"}),": All 11 iterations pass with ",(0,t.jsx)(n.code,{children:"Error = 0"}),", indicating identical behavior across MIL, SIL, and PIL tests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coverage"}),": 100% MCDC achieved via hybrid MIL/SIL/PIL testing, ensuring comprehensive validation."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:(0,t.jsx)(n.strong,{children:"Summary"})}),"\n",(0,t.jsx)(n.p,{children:"Testing BMS-generated code involves:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SIL Testing"}),": Validate code on a host PC against Simulink results to ensure functional correctness."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PIL Testing"}),": Measure performance on target hardware (e.g., BeagleBone) to validate real-time behavior."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Equivalence Checks"}),": Use the ",(0,t.jsx)(n.strong,{children:"Simulink Test Manager"})," for automated comparisons between MIL, SIL, and PIL results."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For advanced workflows, leverage ",(0,t.jsx)(n.strong,{children:"Simulink Coverage"})," and ",(0,t.jsx)(n.strong,{children:"Embedded Coder"})," to meet safety-critical standards like ISO 26262 ASIL-D, ensuring robust and compliant BMS software."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);